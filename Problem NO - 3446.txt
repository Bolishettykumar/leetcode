import java.util.*;

class Solution {
    public int[][] sortMatrix(int[][] grid) {
        int n = grid.length;
        Map<Integer, Deque<Integer>> diag = new HashMap<>();

        // 1. Group elements by diagonal key = i - j
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int key = i - j;
                diag.computeIfAbsent(key, k -> new ArrayDeque<>()).add(grid[i][j]);
            }
        }

        // 2. Sort each group
        for (Map.Entry<Integer, Deque<Integer>> entry : diag.entrySet()) {
            List<Integer> list = new ArrayList<>(entry.getValue());
            int key = entry.getKey();
            if (key < 0) {
                Collections.sort(list);  // ascending
            } else {
                Collections.sort(list, Collections.reverseOrder());  // descending
            }
            // Store back into deque for easy pop
            entry.getValue().clear();
            for (int num : list) {
                entry.getValue().add(num);
            }
        }

        // 3. Refill the grid by taking elements from the deque
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int key = i - j;
                grid[i][j] = diag.get(key).pollFirst();
            }
        }

        return grid;
    }
}
